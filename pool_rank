#!/bin/bash

if ! test -f settings; then
    echo "Settings are not set. Starting ./init"
    ./init
fi

source ./utils/functions
source ./settings

clear

printf "$BOLD$PURPLE
                     .__                          __    
______   ____   ____ |  |   ____________    ____ |  | __
\\____ \\ /  _ \\ /  _ \\|  |   \\_  __ \\__  \\  /    \\|  |/ /
|  |_> >  <_> |  <_> )  |__  |  | \\// __ \\|   |  \\    < 
|   __/ \\____/ \\____/|____/  |__|  (____  /___|  /__|_ \\
|__|                                    \\/     \\/     \\/
$DEF
"

# ---------------------------------------- Obtain an access token ---------------------------------------- #
RESPONSE=$(curl -s --request POST \
	--url "https://api.intra.42.fr/oauth/token" \
	--header "content-type: application/json" \
	--data "{
		\"grant_type\": \"client_credentials\",
		\"client_id\": \"$UID_42\",
		\"client_secret\": \"$SECRET_42\"
	}")
if [[ "$RESPONSE" == *"error"* ]]; then
	printf "${BOLD}${RED}Error: Failed to obtain access token (check UID and SECRET)\n${DEF}"
	exit 1
fi

ACCESS_TOKEN=$(echo $RESPONSE | jq -r '.access_token')
if [ -z "$ACCESS_TOKEN" ]; then
	printf "${BOLD}${RED}Error: Failed to obtain access token (check UID and SECRET)\n${DEF}"
	exit 1
fi

# ------------------------------------ Check if the variables are set ------------------------------------ #
if [ -z "$CAMPUS_ID" ]; then
	printf "${BOLD}${RED}Error: Please set an existing campus ID (you can use campus_id.sh)\n${DEF}"
	exit 1
elif [ -z "$POOL_MONTH" ]; then
	printf "${BOLD}${RED}Error: Please set a pool month\n${DEF}"
	exit 1
elif [ -z "$POOL_YEAR" ]; then
	printf "${BOLD}${RED}Error: Please set a pool year\n${DEF}"
	exit 1
elif [ -z "$PR_PATH" ]; then
	printf "${BOLD}${RED}Error: Please set the pool_rank path\n${DEF}"
	exit 1
fi

printf "\n${BOLD}Pool month:${GREEN} $POOL_MONTH\n$DEF${BOLD}Pool year:${GREEN} $POOL_YEAR$DEF\n\n"

# --------------------------------------- Refresh the ranks or not --------------------------------------- #
if [ ! -e "$PR_PATH/users" ] || [ ! -s "$PR_PATH/users" ]; then
	REFRESH=1
else
	printf "${BOLD}${DEF}$(tail -n 1 $PR_PATH/users)\n\n${DEF}"
	while : ; do
		printf "${GRAY}Do you want to refresh ? (Y/n):$DEF "
		read -p "" REFRESH
		printf "${DEF}"
		case $REFRESH in
			[Yy]*)
				REFRESH=1
				break;;
			[Nn]*)
				REFRESH=0
				break;;
			*)
				printf "${BOLD}${RED}Please answer yes (y) or no (n).$DEF\n"
				;;
		esac
	done
fi

if [ "$REFRESH" -eq 1 ]; then
	echo -n "" > $PR_PATH/users
	ALL_PAGE_USERS=$(fetch_users_by_pool "$POOL_MONTH" "$POOL_YEAR")
	if [ $? -ne 0 ]; then
		printf "${BOLD}${RED}Error: No students found for the specified pool month/year.\n${DEF}"
		exit 1
	fi
	fetch_users_data "$ALL_PAGE_USERS"
	if [ $? -ne 0 ]; then
		printf "${BOLD}${RED}Error: Failed to fetch students' data\n${DEF}"
		exit 1
	fi
	printf "Last updated date: $(date +%Y/%m/%d-%H:%M:%S)" >> $PR_PATH/users
	printf "\n"
fi

# --------------------------------------------- PRINT RANKS ---------------------------------------------- #
printf "${GRAY}"
printf "Choose login to highlight (default: $BOLD$GREEN$LOGIN$GRAY):$DEF "
read -p "" LOGIN_INPUT
printf "${DEF}\n"

if [ -z "$LOGIN_INPUT" ]; then
	LOGIN_INPUT=$LOGIN
fi
printf "${BOLD}${RED}RANK  LOGIN      LVL\n${DEF}"

# Read from the file, sort in reverse by the second field (level), and format the output
RANK_USERS=$(sed '$d' $PR_PATH/users | sort -t: -k2 -nr)
echo "$RANK_USERS" | awk -F": " -v bold="$BOLD" -v def="$DEF" -v green="$GREEN" -v yellow="$YELLOW" \
	-v gray="$GRAY" -v login="$LOGIN_INPUT"\
	'BEGIN {rank=1} {
		if ($1 == login) {
			printf bold green "%-5s " green "%-10s " yellow "%0.4s\n" def, rank++, $1, $2
		} else {
			printf bold green "%-5s " gray "%-10s " yellow "%0.4s\n" def, rank++, $1, $2
		}
	}'
